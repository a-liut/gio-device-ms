/*
 * Devices service
 *
 * Microservice for managing Gi√≤ Plants devices
 *
 * API version: 1.0.0
 * Contact: andrea.liut@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package model

import (
	"bytes"
	"encoding/json"
	"fmt"
	"gio-device-ms/pkg/utils"
	"log"
	"net/http"
	"net/url"
	"os"
	"strconv"
	"sync"
)

type Device struct {
	ID   string `json:"id,omitempty"`
	Name string `json:"name"`
	Mac  string `json:"mac"`
	Room string `json:"room"`
}

type ActionData struct {
	Value int `json:"value"`
}

func (device *Device) String() string {
	return fmt.Sprintf("<Device %s, %s, %s, %s>", device.ID, device.Name, device.Mac, device.Room)
}

func (device *Device) Validate() (bool, error) {
	if device.Name == "" {
		return false, fmt.Errorf("invalid name")
	}

	if device.Mac == "" {
		return false, fmt.Errorf("invalid mac")
	}

	if device.Room == "" {
		return false, fmt.Errorf("invalid room")
	}

	return true, nil
}

// Triggers an action on this device.The request is sent to all DeviceDrivers registered.
// Returns the array of errors raised and a boolean indicating whether at least one request has been successfully completed.
func (device *Device) TriggerAction(actionName string, actionData *ActionData) ([]error, bool) {
	// Broadcast the action to all registered drivers
	errorsChan := make(chan error, 1)

	wg := sync.WaitGroup{}
	wg.Add(len(deviceDrivers))

	for _, d := range deviceDrivers {
		go func(driver DeviceDriver) {
			log.Printf("TriggerActionOnDevice on %s\n", driver)
			if err := driver.TriggerActionOnDevice(device, actionName, actionData); err != nil {
				log.Println(err)
				errorsChan <- err
			}

			wg.Done()
		}(d)
	}

	go func() {
		wg.Wait()

		close(errorsChan)
	}()

	errors := make([]error, 0)
	for err := range errorsChan {
		errors = append(errors, err)
	}

	return errors, len(errors) != len(deviceDrivers)
}

type Reading struct {
	ID                string `json:"id,omitempty"`
	Name              string `json:"name"`
	Value             string `json:"value"`
	Unit              string `json:"unit"`
	CreationTimestamp string `json:"creation_timestamp"`
}

type DriverApiResponse struct {
	Code    int    `json:"code,omitempty"`
	Message string `json:"message,omitempty"`
}

type DeviceDriver struct {
	url string
}

func (deviceDriver *DeviceDriver) String() string {
	return fmt.Sprintf("<DeviceDriver %s>", deviceDriver.url)
}

type FogNodeDevice struct {
	ID              string              `json:"id"`
	Name            string              `json:"name"`
	Characteristics []BLECharacteristic `json:"characteristics"`
}

type BLECharacteristic struct {
	UUID string `json:"uuid"`
	Name string `json:"name"`
}

func (deviceDriver *DeviceDriver) GetConnectedDevices() ([]FogNodeDevice, error) {
	u := fmt.Sprintf("%s/devices", deviceDriver.url)
	resp, err := http.Post(u, "application/json", nil)

	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {

		// Get error response
		var bodyData DriverApiResponse
		err := json.NewDecoder(resp.Body).Decode(&bodyData)
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("cannot trigger action: (%d) %s", resp.StatusCode, bodyData.Message)
	}

	var devices []FogNodeDevice
	if err := json.NewDecoder(resp.Body).Decode(&devices); err != nil {
		return nil, err
	}

	return devices, nil
}

func getActionBodyData(data *ActionData) *bytes.Buffer {
	if data != nil {
		body, err := json.Marshal(data)
		if err == nil {
			return bytes.NewBuffer(body)
		}
	}
	return nil
}

func (deviceDriver *DeviceDriver) TriggerActionOnDevice(device *Device, actionName string, actionData *ActionData) error {
	u := fmt.Sprintf("%s/devices/%s/actions/%s", deviceDriver.url, device.Mac, actionName)

	bodyData := getActionBodyData(actionData)
	resp, err := utils.DoPost(u, bodyData)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		// Get error response
		var bodyData DriverApiResponse
		err := json.NewDecoder(resp.Body).Decode(&bodyData)
		if err != nil {
			return err
		}

		return fmt.Errorf("cannot trigger action: (%d) %s", resp.StatusCode, bodyData.Message)
	}

	return nil
}

var deviceDrivers []DeviceDriver = nil

func Init() error {
	log.Printf("Initializing DeviceDrivers")
	count, err := strconv.Atoi(os.Getenv("DEVICE_DRIVER_COUNT"))
	if err != nil {
		return err
	}

	deviceDrivers = make([]DeviceDriver, count)
	for i := 0; i < count; i++ {
		deviceDriverHost := os.Getenv(fmt.Sprintf("DEVICE_DRIVER_%d_HOST", i))
		deviceDriverPort := os.Getenv(fmt.Sprintf("DEVICE_DRIVER_%d_PORT", i))

		u := fmt.Sprintf("http://%s:%s", deviceDriverHost, deviceDriverPort)
		log.Printf("DeviceDriver %d URL: %s\n", i, u)

		_, err := url.Parse(u)
		if err != nil {
			return err
		}

		deviceDrivers[i].url = u
	}

	return nil
}
