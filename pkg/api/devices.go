/*
 * Devices service
 *
 * Microservice for managing Gi√≤ Plants devices
 *
 * API version: 1.0.0
 * Contact: andrea.liut@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package api

import (
	"encoding/json"
	"gio-device-ms/pkg/model"
	"gio-device-ms/pkg/repository"
	"log"
	"net/http"

	"github.com/gorilla/mux"
)

func GetDeviceById(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id := vars["deviceId"]

	repo, _ := repository.NewDeviceRepository()
	device, err := repo.Get(id)

	if err != nil {
		errorHandler(w, http.StatusNotFound, err.Error())
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	if err := json.NewEncoder(w).Encode(device); err != nil {
		log.Println(err)
	}
}

func GetDevices(w http.ResponseWriter, _ *http.Request) {
	repo, _ := repository.NewDeviceRepository()
	devices, err := repo.GetAll()

	if err != nil {
		errorHandler(w, http.StatusNotFound, err.Error())
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	if err := json.NewEncoder(w).Encode(devices); err != nil {
		log.Println(err)
	}
}

func CreateDevice(w http.ResponseWriter, r *http.Request) {
	var d model.Device

	err := json.NewDecoder(r.Body).Decode(&d)
	if err != nil {
		errorHandler(w, http.StatusBadRequest, "Invalid data")
		return
	}

	if _, err := d.Validate(); err != nil {
		errorHandler(w, http.StatusBadRequest, err.Error())
		return
	}

	// Check room
	roomRepo, _ := repository.NewRoomRepository()
	if _, err := roomRepo.Get(d.Room); err != nil {
		errorHandler(w, http.StatusBadRequest, err.Error())
		return
	}

	repo, _ := repository.NewDeviceRepository()
	newDevice, err := repo.Insert(&d)

	if err != nil {
		errorHandler(w, http.StatusInternalServerError, err.Error())
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	if err := json.NewEncoder(w).Encode(newDevice); err != nil {
		log.Println(err)
	}
}

func GetDeviceReadings(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id := vars["deviceId"]

	repo, _ := repository.NewDeviceRepository()
	readings, err := repo.GetReadings(id)

	if err != nil {
		errorHandler(w, http.StatusInternalServerError, err.Error())
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	if err := json.NewEncoder(w).Encode(readings); err != nil {
		log.Println(err)
	}
}

func CreateDeviceReadings(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id := vars["deviceId"]

	var reading model.Reading
	err := json.NewDecoder(r.Body).Decode(&reading)
	if err != nil {
		errorHandler(w, http.StatusBadRequest, "Invalid data")
		return
	}

	repo, _ := repository.NewDeviceRepository()

	device, err := repo.Get(id)

	if err != nil {
		errorHandler(w, http.StatusNotFound, err.Error())
		return
	}

	res, err := repo.InsertReading(device, &reading)

	if err != nil {
		errorHandler(w, http.StatusInternalServerError, err.Error())
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	if err := json.NewEncoder(w).Encode(res); err != nil {
		log.Println(err)
	}
}
