/*
 * Devices service
 *
 * Microservice for managing Gi√≤ Plants devices
 *
 * API version: 1.0.0
 * Contact: andrea.liut@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package api

import (
	"encoding/json"
	"gio-device-ms/pkg/logging"
	"gio-device-ms/pkg/model"
	"log"
	"net/http"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      []string
	Pattern     string
	Queries     []string
	HandlerFunc http.HandlerFunc
}

func errorHandler(w http.ResponseWriter, status int32, message string) {
	r := model.ApiResponse{Code: status, Message: message}
	w.WriteHeader(int(status))
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if err := json.NewEncoder(w).Encode(r); err != nil {
		log.Println(err)
	}
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = logging.Logger(handler, route.Name)

		router.
			Methods(route.Method...).
			Path(route.Pattern).
			//Queries(route.Queries...).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

var routes = Routes{
	// Rooms
	Route{
		"GetRoomById",
		[]string{http.MethodGet},
		"/rooms/{roomId}",
		[]string{},
		GetRoomById,
	},

	Route{
		"GetRooms",
		[]string{http.MethodGet},
		"/rooms",
		[]string{},
		GetRooms,
	},

	Route{
		"CreateRoom",
		[]string{http.MethodPost},
		"/rooms",
		[]string{},
		CreateRoom,
	},

	// Devices
	Route{
		"GetDeviceById",
		[]string{http.MethodGet},
		"/rooms/{roomId}/devices/{deviceId}",
		[]string{},
		GetDeviceById,
	},

	Route{
		"GetDevices",
		[]string{http.MethodGet},
		"/rooms/{roomId}/devices",
		[]string{},
		GetDevices,
	},

	Route{
		"CreateDevice",
		[]string{http.MethodPost},
		"/rooms/{roomId}/devices",
		[]string{},
		CreateDevice,
	},

	Route{
		"GetDeviceReadings",
		[]string{http.MethodGet},
		"/rooms/{roomId}/devices/{deviceId}/readings",
		[]string{"limit", "{[0-9]+}"},
		GetDeviceReadings,
	},

	Route{
		"CreateDeviceReadings",
		[]string{http.MethodPost},
		"/rooms/{roomId}/devices/{deviceId}/readings",
		[]string{},
		CreateDeviceReadings,
	},
}
