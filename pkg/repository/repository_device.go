/*
 * Devices service
 *
 * Microservice for managing Gi√≤ Plants devices
 *
 * API version: 1.0.0
 * Contact: andrea.liut@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package repository

import (
	"fmt"
	"gio-device-ms/pkg/model"
)

type DeviceRepository struct {
	devices  map[string]*model.Device
	readings map[string][]*model.Reading
}

func (r *DeviceRepository) Get(id string) (*model.Device, error) {
	d, _ := r.devices[id]

	return d, nil
}

func (r *DeviceRepository) GetReadings(id string) ([]*model.Reading, error) {
	readings, exists := r.readings[id]
	if !exists {
		return nil, fmt.Errorf("device %s not found", id)
	}

	return readings, nil
}

func (r *DeviceRepository) GetAll(roomId string) ([]*model.Device, error) {
	res := make([]*model.Device, len(r.devices))

	i := 0
	for _, d := range r.devices {
		if roomId == "" || d.Room == roomId {
			res[i] = d
			i++
		}
	}

	return res, nil
}

func (r *DeviceRepository) Insert(device *model.Device) (*model.Device, error) {
	device.ID = newID()

	r.devices[device.ID] = device
	r.readings[device.ID] = make([]*model.Reading, 0)

	return device, nil
}

func (r *DeviceRepository) InsertReading(device *model.Device, reading *model.Reading) (*model.Reading, error) {
	reading.ID = newID()

	r.readings[device.ID] = append(r.readings[device.ID], reading)

	return reading, nil
}

var deviceRepository *DeviceRepository

func NewDeviceRepository() (*DeviceRepository, error) {
	if deviceRepository == nil {
		deviceRepository = &DeviceRepository{make(map[string]*model.Device), make(map[string][]*model.Reading)}
	}

	return deviceRepository, nil
}
