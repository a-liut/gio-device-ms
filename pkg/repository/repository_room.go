/*
 * Devices Microservice
 *
 * Microservice for managing Gi√≤ Plants devices
 *
 * API version: 1.0.0
 * Contact: andrea.liut@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package repository

import (
	"gio-device-ms/pkg/model"
	"sync"
)

type RoomRepository struct {
	roomsMutex *sync.Mutex

	rooms map[string]*model.Room
}

// Returns a specific room
func (r *RoomRepository) Get(id string) (*model.Room, error) {
	r.roomsMutex.Lock()
	defer r.roomsMutex.Unlock()

	room, _ := r.rooms[id]

	return room, nil
}

// Returns all rooms
func (r *RoomRepository) GetAll() ([]*model.Room, error) {
	res := make([]*model.Room, len(r.rooms))

	r.roomsMutex.Lock()
	defer r.roomsMutex.Unlock()

	i := 0
	for _, d := range r.rooms {
		res[i] = d
		i++
	}

	return res, nil
}

// Adds a new room
func (r *RoomRepository) Insert(room *model.Room) (*model.Room, error) {
	r.roomsMutex.Lock()
	defer r.roomsMutex.Unlock()

	room.ID = newID()

	r.rooms[room.ID] = room

	return room, nil
}

// Returns a room identified by name
func (r *RoomRepository) GetByName(name string) (*model.Room, error) {
	r.roomsMutex.Lock()
	defer r.roomsMutex.Unlock()

	for _, room := range r.rooms {
		if room.Name == name {
			return room, nil
		}
	}

	return nil, nil
}

var roomRepository *RoomRepository

func NewRoomRepository() (*RoomRepository, error) {
	if roomRepository == nil {
		roomRepository = &RoomRepository{
			roomsMutex: &sync.Mutex{},
			rooms:      make(map[string]*model.Room),
		}
	}

	return roomRepository, nil
}
